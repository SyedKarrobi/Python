{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "d70af2dc-c581-459d-834d-accfa85d5253",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'Name': 'sajid', 'Gender': 'male', 'skills': ['Data Science', 'ML', 'AI'], 'Country': 'Pakistan', 'City': 'Karachi', 'Age': 31}\n",
      "<class 'dict'>\n"
     ]
    }
   ],
   "source": [
    "#dictionaries are key value pair. (key value:pairs {}}) E.g name can be same but there values will be different\n",
    "#ordered , changeable and dont allow duplicates,immutable , unique\n",
    "person = {\"Name\":'sajid',\n",
    "          'Gender':'male',\n",
    "          'skills':['Data Science','ML',\"AI\"],\n",
    "          'Country':'Pakistan',\n",
    "          'City':'Karachi',\n",
    "          'Age':31}\n",
    "print(person)\n",
    "print(type(person))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "cf547414-ec24-4048-9e0c-e767bddda6f2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['Name', 'Gender', 'skills', 'Country', 'City', 'Age'])"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "person.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "132097e5-64f4-42ee-8b79-d2ee9e7d0241",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_values(['sajid', 'male', ['Data Science', 'ML', 'AI'], 'Pakistan', 'Karachi', 31])"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "person.values()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "f44a2629-ab1f-4942-9225-dee67e7d1271",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_items([('Name', 'sajid'), ('Gender', 'male'), ('skills', ['Data Science', 'ML', 'AI']), ('Country', 'Pakistan'), ('City', 'Karachi'), ('Age', 31)])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "person.items()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "659bd2db-fd03-440b-9e84-483aeb6c7014",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Data Science', 'ML', 'AI']"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "person.get(\"skills\")\n",
    "#when retrieving we got only one output example\n",
    "person.get(\"skills\",\"Age\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "f0d9ae3b-14ab-453d-a226-22df5aa8b7f6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'Name': 'sajid', 'Gender': 'male', 'Marks': {'Date science': 10, 'PS': 20, 'AI': 20}, 'Country': 'Pakistan', 'City': 'Karachi', 'Age': 31}\n",
      "<class 'dict'>\n"
     ]
    }
   ],
   "source": [
    "person1 = {\"Name\":'sajid',\n",
    "          'Gender':'male',\n",
    "          'Marks':{'Date science':10,'PS':20,'AI':20},\n",
    "          'Country':'Pakistan',\n",
    "          'City':'Karachi',\n",
    "          'Age':31}\n",
    "print(person1)\n",
    "print(type(person1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "956e1b93-c823-404b-940f-e2b5b3bcb67e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "20"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "person1.get(\"Marks\")[\"PS\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "2654fde5-955a-4607-96c3-03a8d7510722",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6\n",
      "6\n"
     ]
    }
   ],
   "source": [
    "print (len(person))\n",
    "print (len(person1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "14353ab7-746d-4738-af5c-72846e18e716",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'Name': 'sajid', 'Gender': 'male', 'skills': ['Data Science', 'ML', 'AI'], 'Country': 'Pakistan', 'City': 'Karachi', 'Age': 31, 'Marks': {'Date science': 10, 'PS': 20, 'AI': 20}}\n"
     ]
    }
   ],
   "source": [
    "person.update(person1)\n",
    "print(person)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "874385a5-43e0-4b1f-aa32-80c0ee009e3d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "20"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "person.get(\"Marks\")[\"PS\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "cbceda48-b665-4ac0-99d0-bd00a2e39b0d",
   "metadata": {},
   "outputs": [],
   "source": [
    "person['organization']='NASTP'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "90cb131a-f930-4385-bd04-da46a224a357",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'Name': 'sajid', 'Gender': 'male', 'skills': ['Data Science', 'ML', 'AI'], 'Country': 'Pakistan', 'City': 'Karachi', 'Age': 31, 'Marks': {'Date science': 10, 'PS': 20, 'AI': 20}, 'organization': 'NASTP'}\n"
     ]
    }
   ],
   "source": [
    "print (person)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "52be5721-043f-4979-b50c-6f4428b93ae5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'Name': 'sajid', 'Gender': 'male', 'skills': ['Data Science', 'ML', 'AI'], 'Country': 'Pakistan', 'City': 'Karachi', 'Age': 31, 'Marks': {'Date science': 10, 'PS': 20, 'AI': 20}, 'organization': 'NASTP', 'Roll': 32, 'Address': 'None'}\n"
     ]
    }
   ],
   "source": [
    "person.update({'Roll':32,'Address':'None'})\n",
    "print(person)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "c6ccde51-acfe-454b-aa30-1ee7e42be942",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'Name': 'sajid', 'Gender': 'male', 'skills': ['Data Science', 'ML', 'AI'], 'Country': 'Pakistan', 'City': 'Karachi', 'Marks': {'Date science': 10, 'PS': 20, 'AI': 20}, 'organization': 'NASTP', 'Roll': 32, 'Address': 'None'}\n"
     ]
    }
   ],
   "source": [
    "#popo helps you get the value according to the key (pop= delete)\n",
    "person.pop('Age')\n",
    "print (person)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "27af8178-6372-4ece-b52b-09e549d738cb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('Address', 'None')"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#pop item will fetch the last item and delete it /removed\n",
    "person.popitem()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "7ba14424-ee84-4aca-a302-c23f03e9c310",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'Name': 'sajid', 'Gender': 'male', 'skills': ['Data Science', 'ML', 'AI'], 'Country': 'Pakistan', 'City': 'Karachi', 'Marks': {'Date science': 10, 'PS': 20, 'AI': 20}, 'organization': 'NASTP', 'Roll': 32, 'name': 'majeed'}\n"
     ]
    }
   ],
   "source": [
    "#set deafult key helps you default set the output of your key values in dictionary\n",
    "x=person.setdefault('name','majeed')\n",
    "print (person)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "e0d87372-d17f-4f3e-b7bb-7712feba879b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'cbrt', 'ceil', 'comb', 'copysign', 'cos', 'cosh', 'degrees', 'dist', 'e', 'erf', 'erfc', 'exp', 'exp2', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'gcd', 'hypot', 'inf', 'isclose', 'isfinite', 'isinf', 'isnan', 'isqrt', 'lcm', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'log2', 'modf', 'nan', 'nextafter', 'perm', 'pi', 'pow', 'prod', 'radians', 'remainder', 'sin', 'sinh', 'sqrt', 'sumprod', 'tan', 'tanh', 'tau', 'trunc', 'ulp']\n"
     ]
    }
   ],
   "source": [
    "#####Modules import modulefinder print(dir(modulefinder)), keyword import keyword print(dir(keyword))###Libraries import math dir(Math), random\n",
    "### import -library name & which things exist in the library\n",
    "import math\n",
    "print (dir(math))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "fae188bd-f05a-402d-bcab-b45d4ddc03d9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "math.floor(3.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "5dcc6099-1bd3-40f3-b4e2-97160afea561",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "math.ceil(3.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "6885da12-86a6-4e23-a6d4-3fbfe8b50a0f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4.0"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "math.sqrt(16)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "f98d0131-a0f8-4572-a42b-a9a0f93ff1f3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8414709848078965"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "math.sin(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "2a4161c1-8d03-41cb-aed6-ed8dff974712",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8.0"
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#2 ke power 3\n",
    "math.pow(2,3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "dedff8f0-2a6b-474a-a8f0-a55e6cf51093",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "720"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 6! = 6x5x4x3x2x1\n",
    "math.factorial (6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "id": "476f8ee9-32d0-45c8-902e-08e6ca75e0c8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['AddPackagePath', 'Module', 'ModuleFinder', 'ReplacePackage', '_C_BUILTIN', '_C_EXTENSION', '_PKG_DIRECTORY', '_PY_COMPILED', '_PY_FROZEN', '_PY_SOURCE', '_SEARCH_ERROR', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_find_module', 'dis', 'importlib', 'io', 'marshal', 'os', 'packagePathMap', 'replacePackageMap', 'sys', 'test']\n"
     ]
    }
   ],
   "source": [
    "import modulefinder\n",
    "print(dir(modulefinder))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "id": "96a5af2a-be1c-44bf-8add-e859765bfb5f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'iskeyword', 'issoftkeyword', 'kwlist', 'softkwlist']\n"
     ]
    }
   ],
   "source": [
    "import keyword \n",
    "print(dir(keyword))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "id": "17eeb851-c6b0-4ab8-a191-285f416ec4f6",
   "metadata": {},
   "outputs": [],
   "source": [
    "import random"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "id": "d0eb4705-424e-4673-9909-551843309601",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 153,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "random.randint(1,15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "94c8a571-df87-46f8-8879-952699610e64",
   "metadata": {},
   "outputs": [],
   "source": [
    "#### Iterative Statement & Conditional Statement\n",
    "#Conditional statement\n",
    "#if,else,elif"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
